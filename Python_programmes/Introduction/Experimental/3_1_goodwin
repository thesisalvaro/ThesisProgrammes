import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

p = 9
b = 0.1

def goodwin(t, vars):
    x, y, z = vars
    dxdt = 1 / (1 + z**p) - b * x
    dydt = b * (x - y)
    dzdt = b * (y - z)
    return [dxdt, dydt, dzdt]

t_span = (0, 5000)  
initial_conditions = [
    [0.5, 1, -0.5],  
    [0.5, 1, 1.5],   
    [1, 0.5, -0.5]     
]
fig, axs = plt.subplots(1, 3, figsize=(15, 15))
for idx, initial in enumerate(initial_conditions):
    sol = solve_ivp(goodwin, t_span, initial, t_eval=np.linspace(0, 5000, 50000))
    x = sol.y[0]
    y = sol.y[1]
    z = sol.y[2]
    t_eval=np.linspace(0, 5000, 50000)  
    #xy
    axs[0].plot(t_eval, x, label=f'IC {idx + 1}')
    axs[0].set_xlabel('t')
    axs[0].set_ylabel('x')
    axs[0].set_title('Trajectory in xy-plane')
    axs[0].grid(True)

    #yz
    axs[1].plot(y, z, label=f'IC {idx + 1}')
    axs[1].set_xlabel('y')
    axs[1].set_ylabel('z')
    axs[1].set_title('Trajectory in yz-plane')
    axs[1].grid(True)

    #xz
    axs[2].plot(x, z, label=f'IC_{idx + 1}')
    axs[2].set_xlabel('x')
    axs[2].set_ylabel('z')
    axs[2].set_title('Trajectory in xz-plane')
    axs[2].grid(True)

for ax in axs.flat:
    ax.legend()

plt.tight_layout()
plt.suptitle('Phase Portraits', fontsize=16)
plt.subplots_adjust(top=0.9)
plt.show()
